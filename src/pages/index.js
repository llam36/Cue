import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, useState } from 'react'
import { init, Ditto } from "@dittolive/ditto"
import { connectDB } from "./api/database"

const inter = Inter({ subsets: ['latin'] })

let queueSubscription
let queueLiveQuery
let swapRequestsSubscription
let swapRequestsLiveQuery

let ditto

export default function Home() {
  const [queue, setQueue] = useState()
  const [request, setRequest] = useState()
  useEffect(() => {
    async function observeQueueAndSwapRequests() {
      try {
        if (ditto == null) {
          ditto = await connectDB();
        }
        let size = 3
        queueSubscription = await ditto.store.collection('reservations').find(`tableSize == ${size}`).subscribe()
        queueLiveQuery = await ditto.store.collection('reservations').find(`tableSize == ${size}`).observeLocal((docs, event) => {
          let res = []
          Object.values(docs).forEach(doc => {
            res.push(doc.value)
          });
          setQueue(res)
        })

        let id = "64bbeab700ce2c1d0047cb1c"
        swapRequestsSubscription = await ditto.store.collection('swapRequests').find(`target == '${id}'`).subscribe()
        swapRequestsLiveQuery = await ditto.store.collection('swapRequests').find(`target == '${id}'`).observeLocal((docs, event) => {
          let res = []
          Object.values(docs).forEach(doc => {
            res.push(doc.value)
          });
          setRequest(res)
        })

      } catch (err) {
        console.log(err);
      }

    }


    async function observeQueue() {
      try {
        let ditto = await connectDB();
        let size = 3
        queueSubscription = await ditto.store.collection('reservations').find(`tableSize == ${size}`).subscribe()
        queueLiveQuery = await ditto.store.collection('reservations').find(`tableSize == ${size}`).observeLocal((docs, event) => {
          let res = []
          Object.values(docs).forEach(doc => {
            res.push(doc.value)
          });
          setQueue(res)
        })
      } catch (err) {
        console.log(err);
      }
    }

    async function observeSwapRequests() {
      try {
        let ditto = await connectDB();
        let id = "64bbeab700ce2c1d0047cb1c"
        swapRequestsSubscription = await ditto.store.collection('swapRequests').find(`target == '${id}'`).subscribe()
        swapRequestsLiveQuery = await ditto.store.collection('swapRequests').find(`target == '${id}'`).observeLocal((docs, event) => {
          let res = []
          Object.values(docs).forEach(doc => {
            res.push(doc.value)
          });
          setRequest(res)
        })
      } catch (err) {
        console.log(err);
      }
    }
    // observeQueue();
    //observeSwapRequests();
    observeQueueAndSwapRequests()
  }, []);
  console.log(queue == null ? [] : queue)
  console.log(request == null ? [] : request)
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>src/pages/index.js</code>
          </p>
          <div>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src="/next.svg"
            alt="Next.js Logo"
            width={180}
            height={37}
            priority
          />
        </div>

        <div className={styles.grid}>
          <a
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Docs <span>-&gt;</span>
            </h2>
            <p>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Learn <span>-&gt;</span>
            </h2>
            <p>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Templates <span>-&gt;</span>
            </h2>
            <p>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2>
              Deploy <span>-&gt;</span>
            </h2>
            <p>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </>
  )
}
